#include <stdio.h>
#include <conio.h>
#include <string.h>
#include <stdlib.h>
#include <windows.h>
#include <ctime>
#define SIZE 15
#define MAX 13
#define MIN 5
#define HORIZONTAL 0
#define VERTICAL 1
#define DIAGONAL 2
#define DERECHO 0
#define REVES 1
	int total=0;
 void gotoxy(int x,int y){
      HANDLE hcon;
      hcon = GetStdHandle(STD_OUTPUT_HANDLE);
      COORD dwPos;
      dwPos.X = x;
      dwPos.Y= y;
      SetConsoleCursorPosition(hcon,dwPos);
}


void inicializarmapa(char tablero[SIZE][SIZE]){

    for(int i=0;i<SIZE;i++){
        for(int j=0;j<SIZE;j++){
            tablero[i][j]='°';
        }
    }

}

void mostrarmapa(char tablero[SIZE][SIZE]){
printf("   ");
for(int j=0;j<10;j++){
 printf("%d ",j);
}
printf("\n");
    for(int i=0;i<SIZE;i++){
        for(int j=0;j<SIZE;j++){
        	if(j==0 && i<10)
        	printf("%d  %c ",i,tablero[j][i]);
        	else if(j==0 && i>=10)
        	printf("%d %c ",i,tablero[j][i]);
        	else
            printf("%c ",tablero[j][i]);
        }

    printf("\n");
    }
    printf("\n");
    printf("\n");
}

void administrador(char palabras [SIZE][MAX]){

    printf("Ingrese 15 palabras: \n");

    for(int i=0;i<SIZE;i++){


        gets(palabras[i]);
        fflush(stdin);
        if(strlen(palabras[i])<5 || strlen(palabras[i])>13){
        printf("La palabra debe tener minimo 5 letras y maximo 13 letras \n");
        i--;
        }
        for(int j=0;j<i;j++){
            if(strcmp(palabras[i],palabras[j])==0){
                printf("No se permiten palabras repetidas, ingrese otra palabra \n");
                i--;
            }
        }
    }
}

void defecto(char palabras [SIZE][MAX]){
    strcpy(palabras[0],"palabra");
    strcpy(palabras[1],"dragon");
    strcpy(palabras[2],"bomba");
    strcpy(palabras[3],"teclado");
    strcpy(palabras[4],"dinamita");
    strcpy(palabras[5],"guitarra");
    strcpy(palabras[6],"beisbol");
    strcpy(palabras[7],"vecino");
    strcpy(palabras[8],"sentir");
    strcpy(palabras[9],"patilla");
    strcpy(palabras[10],"cabello");
    strcpy(palabras[11],"campeon");
    strcpy(palabras[12],"diamante");
    strcpy(palabras[13],"platino");
    strcpy(palabras[14],"general");
    strcpy(palabras[15],"cinco");
}
bool comprobar(char tablero[SIZE][SIZE], char palabras[SIZE][MAX] , int cx, int cy, int i,int n,int orientacion){
	if(orientacion == HORIZONTAL){
		if(tablero[cx+i][cy] == '°'){
			return true;
		}
		if(tablero[cx+i][cy] == palabras[n][i])  {
			return true;
		}
		return false;
		
	}
	if(orientacion == VERTICAL){
		if(tablero[cx][cy+i] == '°'){
			return true;	
		}
		if(tablero[cx][cy+i] == palabras[n][i]){
				return true;
		}
		return false;
		
	}
	if(orientacion == DIAGONAL){
		if(tablero[cx+i][cy+i] == '°'){
			return true;
		}
		if(tablero[cx+i][cy+i] == palabras[n][i]){
				return true;
		}
	
			return false;
	}

}

void rellenar(char tablero[SIZE][SIZE],char palabras[SIZE][MAX]){
	
 	int orientacion;
    int orden;
    int cx, cy;

    orientacion = rand()%3;
    orden = rand()%2;
    for(int n=0;n<15;n++){
    	int repetir = 0;
    	do{
    	repetir = 0;
        if(orientacion == HORIZONTAL){
            cx = rand()%(SIZE-strlen(palabras[n]));
            cy = rand()%SIZE;
        }else if(orientacion == VERTICAL){
            cx = rand()%SIZE;
            cy = rand()%(SIZE-strlen(palabras[n]));
        }else if(orientacion == DIAGONAL){
            cx = rand()%(SIZE-strlen(palabras[n]));
            cy = rand()%(SIZE-strlen(palabras[n]));
        }
        
        printf("\n palabra de turno -> %s  cx: %d, cy:%d, orientacion: %d",palabras[n],cx,cy,orientacion );
        for(int i=0;i<strlen(palabras[n]);i++){
        if(comprobar(tablero, palabras, cx, cy, i, n, orientacion))
        	printf("\n v %c",palabras[n][i]);
        	else{
        		repetir=1;
        		printf("\n n %c",palabras[n][i]);
			}
		}
		printf("\n");
		mostrarmapa(tablero);
		}while(repetir==1);

        for(int i=0;i<strlen(palabras[n]);i++){
            if(orientacion == HORIZONTAL){
                tablero[cx+i][cy] = palabras[n][i];
            }
            if(orientacion == VERTICAL){
                tablero[cx][cy+i] = palabras[n][i];
            }
            if(orientacion == DIAGONAL){
                tablero[cx+i][cy+i] = palabras[n][i];
            }
        }
    }
    
    for(int i=0;i<SIZE;i++){
    	for(int j=0;j<SIZE;j++){
    		if(tablero[i][j]=='°'){
    			tablero[i][j] = (char)(rand()%25)+97;
    		}
    	}
    }	
    
}

void jugar(char tablero[SIZE][SIZE],char palabras[SIZE][MAX],int encontradas[SIZE]){
	int xini, yini, orientacion;
	
	
	printf("Ingrese coordenada x: ");
	scanf("%d",&xini);
	printf("Ingrese coordenada y: ");
	scanf("%d",&yini);
	printf("Ingrese orientacion (Horizontal 0, Vertical 1, Diagonal 2):");
	scanf("%d",&orientacion);
	
	for(int n=0;n<15;n++){
		
		int contador=0;
		
		printf("\n %s",palabras[n]);
		

			for(int j=0;j<strlen(palabras[n]);j++){
				if(orientacion==HORIZONTAL){
					if(palabras[n][j]==tablero[xini+j][yini]){
						contador++;
						continue;
					}else{
						break;
					}
				}
				if(orientacion==VERTICAL){
					if(palabras[n][j]==tablero[xini][yini+j]){
							contador++;
						continue;
					}else{
						break;
					}
				}
				if(orientacion==DIAGONAL){
					if(palabras[n][j]==tablero[xini+j][yini+j]){
							contador++;
						continue;
					}else{
						break;
					}
				}
		

	
		}
			if(contador==strlen(palabras[n]) && 	encontradas[n]==0 ){
			
				total++;
				printf("  Encontro a %s",palabras[n]);
				encontradas[n]=1;
			}
		}
	


}


int main(){
	
	
	int orientacion;
    int orden;
    int cx, cy;
    char respuesta[20];
    orientacion = rand()%3;
    orden = rand()%2;
	srand(time(NULL));
	char tablero[SIZE][SIZE];
	char palabras[SIZE][MAX];
	int encontradas[SIZE];
	int num;
	printf("Si desea ser administrador, ingrese 1. Si desea jugar, ingrese 2: \n");
	scanf("%d",&num);
	switch(num){
		

		
		case 1:
			for(int i=0;i<15;i++){
			encontradas[i]=0;
			}
			inicializarmapa(tablero);
			mostrarmapa(tablero);
			administrador(palabras);
			rellenar(tablero,palabras);
			
			
			do{
				system("CLS");
				mostrarmapa(tablero);
				
				for(int i=0;i<SIZE;i++){
				    gotoxy(40,i);
				    if(encontradas[i]==1)
				  	{
			
				    printf("%s",palabras[i]);
				 	}
				   
				    else{
				    
				
				    printf("%s",palabras[i]);
				    }
				}
				printf("\n");
				printf("\n----------------------------------------------------------------\n");
				jugar(tablero, palabras,encontradas);
				
				printf("\n  Numero de palabras encontradas %d",total);
				printf("\n Escribe salir para terminar el juego o cualquier letra para continuar jugando: \n");
				scanf("%s",respuesta);
				
				if(total == 15)
				{
					printf("Has encontrado todas las palabras has ganado el juego");
				}
				
			}while(strcmpi(respuesta,"salir")!=0);
			break;
		
		case 2:
			for(int i=0;i<15;i++){
				encontradas[i]=0;
			}
			
			inicializarmapa(tablero);
			mostrarmapa(tablero);
			defecto(palabras);			
			rellenar(tablero,palabras);
					
			
			
			do{
				system("CLS");
				
		
				mostrarmapa(tablero);
				for(int i=0;i<SIZE;i++){
				    gotoxy(40,i);
				    if(encontradas[i]==1)
				  	{
			
				    printf("%s",palabras[i]);
				  	}
			  
				    else{
				    
				
				    printf("%s",palabras[i]);
				    }
				}
				printf("\n");
				printf("\n----------------------------------------------------------------\n");
				jugar(tablero, palabras,encontradas);
				
				printf("\n Numero de palabras encontradas %d",total);
				printf("\n Escribe salir para terminar el juego o cualquier letra para continuar jugando: \n");
				scanf("%s",respuesta);
				
				if(total == 15)
				{
					printf("Has encontrado todas las palabras, ¡Has ganado!");
				}
					
			}while(strcmpi(respuesta,"salir")!=0);
			
		
		}
	
}
